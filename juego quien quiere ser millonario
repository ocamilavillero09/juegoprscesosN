<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>¿Quién quiere ser millonario?</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin: 20px;
        }
        .hidden {
            display: none;
        }
        .button {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            border-radius: 5px;
            margin: 5px;
        }
        .button:hover {
            background-color: #0056b3;
        }
        #rankingTable {
            width: 50%;
            margin: auto;
            border-collapse: collapse;
        }
        #rankingTable, #rankingTable th, #rankingTable td {
            border: 1px solid black;
        }
        #rankingTable th, #rankingTable td {
            padding: 10px;
            text-align: center;
        }
    </style>
</head>
<body>
    <div id="welcome">
        <h1>Bienvenido a ¿Quién quiere ser millonario?</h1>
        <label for="playersCount">Número de jugadores:</label>
        <input type="number" id="playersCount" min="1">
        <button class="button" onclick="showPlayerNames()">Siguiente</button>
    </div>

    <div id="playerNamesForm" class="hidden">
        <h2>Ingrese los nombres de los jugadores</h2>
        <div id="playerNamesContainer"></div>
        <button class="button" onclick="startGame()">Iniciar Juego</button>
    </div>

    <div id="game" class="hidden">
        <h2 id="playerNameDisplay">Jugador: </h2>
        <p id="question"></p>
        <div>
            <button class="button" onclick="checkAnswer(1)" id="option1"></button>
            <button class="button" onclick="checkAnswer(2)" id="option2"></button>
            <button class="button" onclick="checkAnswer(3)" id="option3"></button>
            <button class="button" onclick="checkAnswer(4)" id="option4"></button>
        </div>
        <p id="message"></p>
        <button class="button" onclick="useLifeline50_50()" id="lifeline50_50">50/50</button>
        <button class="button" onclick="switchQuestion()" id="switchQuestion">Cambiar Pregunta</button>
        <button class="button hidden" id="retireButton" onclick="retire()">Retirarse</button>
        <p id="score">Puntos: 0</p>
    </div>

    <div id="loseScreen" class="hidden">
        <h2>¡Perdiste!</h2>
        <button class="button" onclick="nextPlayer()">Siguiente Jugador</button>
    </div>

    <div id="endGameScreen" class="hidden">
        <h2 id="endMessage"></h2>
        <button class="button" onclick="restartGame()">Reiniciar Juego</button>
        <button class="button" onclick="downloadScore()">Descargar Ranking</button>
    </div>

    <div id="ranking" class="hidden">
        <h2>Ranking</h2>
        <table id="rankingTable">
            <thead>
                <tr>
                    <th>Jugador</th>
                    <th>Puntos</th>
                </tr>
            </thead>
            <tbody id="rankingTableBody"></tbody>
        </table>
    </div>

    <script>
        const questions = {
            easy: [
                { question: "¿Cuál es el continente más grande?", options: ["Asia", "África", "América", "Europa"], correct: 1 },
                { question: "¿Cuál es la capital de Francia?", options: ["Berlín", "Madrid", "París", "Roma"], correct: 3 },
                { question: "¿Qué tipo de energía produce el Sol?", options: ["Energía cinética", "Energía potencial", "Energía térmica", "Energía nuclear"], correct: 4 },
                { question: "¿En qué país se encuentra el Taj Mahal?", options: ["India", "Pakistán", "Bangladesh", "Nepal"], correct: 1 },
                { question: "¿Cuál es el principal gas responsable del efecto invernadero?", options: ["Oxígeno", "Nitrógeno", "Dióxido de carbono", "Metano"], correct: 3 },
                { question: "¿Cuál es la moneda oficial de Japón?", options: ["Yuan", "Won", "Yen", "Dólar"], correct: 3 },
                { question: "¿Qué país ganó la Copa Mundial de Fútbol en 2018?", options: ["Alemania", "Brasil", "Francia", "Argentina"], correct: 3 }
            ],
            hard: [
                { question: "¿Cuál es la teoría que explica el origen del universo?", options: ["Teoría del Big Bang", "Teoría de la Relatividad", "Teoría de la Evolución", "Teoría de la Gravedad"], correct: 1 },
                { question: "¿Qué científico propuso la teoría de la relatividad?", options: ["Isaac Newton", "Galileo Galilei", "Albert Einstein", "Niels Bohr"], correct: 3 },
                { question: "¿En qué país se encuentra el Desierto de Atacama?", options: ["Perú", "Chile", "Argentina", "Bolivia"], correct: 2 },
                { question: "¿Qué tipo de estrella es el Sol?", options: ["Enana blanca", "Enana roja", "Estrella de secuencia principal", "Supergigante"], correct: 3 },
                { question: "¿Qué filósofo griego es conocido por su método de interrogación?", options: ["Platón", "Sócrates", "Aristóteles", "Epicuro"], correct: 2 },
                { question: "¿Qué país tiene la mayor cantidad de islas en el mundo?", options: ["Suecia", "Noruega", "Canadá", "Australia"], correct: 3 },
                { question: "¿Quién escribió 'Cien años de soledad'?", options: ["Gabriel García Márquez", "Mario Vargas Llosa", "Jorge Luis Borges", "Isabel Allende"], correct: 1 },
                { question: "¿Cuál es el elemento químico más abundante en el universo?", options: ["Helio", "Oxígeno", "Carbono", "Hidrógeno"], correct: 4 },
                { question: "¿Cuál es el número primo más pequeño mayor que 20?", options: ["23", "29", "31", "37"], correct: 1 },
                { question: "¿Cuál es la capital de Mongolia?", options: ["Ulaanbaatar", "Beijing", "Seúl", "Astana"], correct: 1 },
                { question: "¿Qué es el 'Bosón de Higgs'?", options: ["Una partícula subatómica", "Un tipo de energía", "Un campo magnético", "Un elemento químico"], correct: 1 },
                { question: "¿En qué año se fundó la ONU?", options: ["1945", "1950", "1920", "1965"], correct: 1 },
                { question: "¿Qué es el 'Cálculo' en matemáticas?", options: ["Una rama de la física", "Una teoría matemática", "Un método para resolver ecuaciones", "Una técnica de análisis"], correct: 4 },
                { question: "¿Cuál es el órgano más grande del cuerpo humano?", options: ["El corazón", "El hígado", "La piel", "Los pulmones"], correct: 3 }
            ]
        };

        let currentQuestionIndex = 0;
        let score = 0;
        let playerScores = {};
        let players = [];
        let currentPlayerIndex = 0;
        let playerName = '';
        let selectedDifficulty = 'easy';
        let lifeline5050Used = false;
        let switchUsed = false;

        function showPlayerNames() {
            const playersCount = parseInt(document.getElementById('playersCount').value);
            if (isNaN(playersCount) || playersCount <= 0) {
                alert('Por favor, ingresa un número válido de jugadores.');
                return;
            }

            const playerNamesContainer = document.getElementById('playerNamesContainer');
            playerNamesContainer.innerHTML = '';

            for (let i = 0; i < playersCount; i++) {
                const input = document.createElement('input');
                input.type = 'text';
                input.placeholder = `Nombre del Jugador ${i + 1}`;
                input.id = `player${i}`;
                playerNamesContainer.appendChild(input);
                playerNamesContainer.appendChild(document.createElement('br'));
            }

            document.getElementById('playerNamesForm').classList.remove('hidden');
            document.getElementById('welcome').classList.add('hidden');
        }

        function startGame() {
            const playersCount = parseInt(document.getElementById('playersCount').value);
            players = [];
            for (let i = 0; i < playersCount; i++) {
                const playerNameInput = document.getElementById(`player${i}`);
                players.push({ name: playerNameInput.value, score: 0 });
            }

            document.getElementById('playerNamesForm').classList.add('hidden');
            document.getElementById('game').classList.remove('hidden');
            loadQuestion();
        }

        function loadQuestion() {
            const questionsList = questions[selectedDifficulty];
            currentQuestionIndex = Math.floor(Math.random() * questionsList.length);
            const question = questionsList[currentQuestionIndex];

            document.getElementById('question').innerText = question.question;
            document.getElementById('option1').innerText = question.options[0];
            document.getElementById('option2').innerText = question.options[1];
            document.getElementById('option3').innerText = question.options[2];
            document.getElementById('option4').innerText = question.options[3];

            document.getElementById('option1').onclick = () => checkAnswer(1);
            document.getElementById('option2').onclick = () => checkAnswer(2);
            document.getElementById('option3').onclick = () => checkAnswer(3);
            document.getElementById('option4').onclick = () => checkAnswer(4);

            document.getElementById('message').innerText = '';
            document.getElementById('score').innerText = `Puntos: ${players[currentPlayerIndex].score}`;

            lifeline5050Used = false;
            switchUsed = false;

            // Habilitar o deshabilitar el botón de retirarse según la estación
            document.getElementById('retireButton').classList.toggle('hidden', !isRetireButtonEnabled());
        }

        function isRetireButtonEnabled() {
            // Habilitar el botón de retirarse solo en las estaciones 5 y 7
            const station = getCurrentStation();
            return station === 5 || station === 7;
        }

        function getCurrentStation() {
            // Determinar la estación actual en función del índice de la pregunta
            return Math.floor(currentQuestionIndex / 5) + 1; // Cambiar el divisor según la cantidad de preguntas por estación
        }

        function checkAnswer(selectedOption) {
            const question = questions[selectedDifficulty][currentQuestionIndex];
            if (selectedOption === question.correct) {
                score += 10;
                document.getElementById('message').innerText = '¡Correcto!';
            } else {
                document.getElementById('message').innerText = 'Incorrecto. ¡Perdiste!';
                document.getElementById('game').classList.add('hidden');
                document.getElementById('loseScreen').classList.remove('hidden');
                return;
            }
            players[currentPlayerIndex].score = score;
            document.getElementById('score').innerText = `Puntos: ${players[currentPlayerIndex].score}`;

            if (questions[selectedDifficulty].length <= 1) {
                document.getElementById('endMessage').innerText = '¡El juego ha terminado!';
                document.getElementById('game').classList.add('hidden');
                document.getElementById('endGameScreen').classList.remove('hidden');
                updateRanking();
                return;
            }

            loadQuestion();
        }

        function useLifeline50_50() {
            if (lifeline5050Used) {
                alert('La ayuda 50/50 ya ha sido utilizada.');
                return;
            }

            const question = questions[selectedDifficulty][currentQuestionIndex];
            const correctOption = question.correct;

            let optionsToRemove = [1, 2, 3, 4].filter(option => option !== correctOption);
            optionsToRemove = optionsToRemove.sort(() => Math.random() - 0.5).slice(0, 2);

            optionsToRemove.forEach(option => {
                document.getElementById(`option${option}`).innerText = '';
                document.getElementById(`option${option}`).onclick = () => {};
            });

            lifeline5050Used = true;
        }

        function switchQuestion() {
            if (switchUsed) {
                alert('La opción de cambiar pregunta ya ha sido utilizada.');
                return;
            }

            loadQuestion();
            switchUsed = true;
        }

        function retire() {
            players[currentPlayerIndex].score = score;
            document.getElementById('game').classList.add('hidden');
            document.getElementById('endGameScreen').classList.remove('hidden');
            document.getElementById('endMessage').innerText = `¡${players[currentPlayerIndex].name} se ha retirado con ${players[currentPlayerIndex].score} puntos!`;
            updateRanking();
        }

        function nextPlayer() {
            players[currentPlayerIndex].score = score; // Guardar el puntaje del jugador actual
            score = 0; // Reiniciar la puntuación para el siguiente jugador
            currentPlayerIndex++;
            if (currentPlayerIndex >= players.length) {
                currentPlayerIndex = 0;
            }
            playerName = players[currentPlayerIndex].name;
            document.getElementById('playerNameDisplay').innerText = `Jugador: ${playerName}`;
            document.getElementById('loseScreen').classList.add('hidden');
            document.getElementById('game').classList.remove('hidden');
            loadQuestion();
        }

        function restartGame() {
            document.getElementById('endGameScreen').classList.add('hidden');
            document.getElementById('welcome').classList.remove('hidden');
            document.getElementById('ranking').classList.add('hidden');
            playerScores = {};
            currentQuestionIndex = 0;
            score = 0;
            lifeline5050Used = false;
            switchUsed = false;
            players.forEach(player => player.score = 0); // Reiniciar puntajes de todos los jugadores
            currentPlayerIndex = 0; // Volver al primer jugador
        }

        function updateRanking() {
            const rankingTableBody = document.getElementById('rankingTableBody');
            rankingTableBody.innerHTML = '';

            players.forEach(player => {
                const row = document.createElement('tr');
                const nameCell = document.createElement('td');
                const scoreCell = document.createElement('td');

                nameCell.innerText = player.name;
                scoreCell.innerText = player.score;

                row.appendChild(nameCell);
                row.appendChild(scoreCell);
                rankingTableBody.appendChild(row);
            });

            document.getElementById('endGameScreen').classList.add('hidden');
            document.getElementById('ranking').classList.remove('hidden');
        }

        function downloadScore() {
            const blob = new Blob([JSON.stringify(players, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'ranking.json';
            a.click();
            URL.revokeObjectURL(url);
        }
    </script>
</body>
</html>
